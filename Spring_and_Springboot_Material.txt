IoC Container:-
----------------
The ApplicationContext interface represents the SpringIoC container and is responsible for instantiating, configuring and assmbling the beans
The container get its instructions on what objects to instantiate, configure, assemble by reading configuration metadata. 

as a developer we are not responsible to do instantiate or configure or assemble the beans in our application, we are just giving the instructions throgh metadata configuration in the form of xml or java annotations or java code. every approach is same only that is as per developer choice. my favourate is java based configuration


Dependency Injection:-
----------------------
Dependency injection is a design pattern used in software development to achieve the Inversion of Control principle.In IoC, the control flow is inverted compared into traditional programming. Instead of component controlling the flow of the program, the control flow is delegated to an external container.
Dependency Injection is a specific implementation of IoC and involves injecting the dependencies of a class from the outside rather than creating them within the class.

Benifits of Dependency Injection:

1. Decoupling:
 Dependencies are not hardcoded within a class, leading to reduce coupling between classes.
2. Flexibility and Configurability:
 Easily switch implementations of dependencies or configure different instances.
3. Testablity:
 Easier unit testing with mock dependencies injected during testing.
4. Readability and maintainability:
 Code more readable as dependencies are explicit and easily visible.

There are Types of injection 
1. Constructor Injection
	* Dependencies are injected trhought the class constructor.
	* The class declares it's dependencies as constructor parameters.
2. Setter Injection
	* Dependencies are injected through setter methods
	* Allows for optional dependencies since not all setters need to be called.
3. Method Injection
	* Dependencies are injected through methods.
	* Similar to setter injection on a per-method basis.

Bean Scopes inside Spring:-
---------------------------
1. Singleton		2.. ProtoType		3.. Request 		4..Session		5..Application


1. Singleton
2. Prototype
3. Request:
-----------
	* spring creates an instance of the bean class for every HTTP request. The instance exists only for that specific HTTP request.
	* Spring creates a lot of instances of this bean in the app's memory for each HTTP request. so these type of beans are short lived.
	* Since Spring creates a lot of instances, please make sure to avoid time consuming logic while creating the instance.
	* Can be considered for the scenarios where the data needs to be reset after new request or page refresh etc..
4. Session:
----------
	* Spring creates an instance and keeps the instance in the server's memory for the full HTTP session. Spring links the instance in the context with the 	  client's session
	* Session scoped beans have longer life & they are less frequently garbage collected.
	* Avoid keeping too much information inside session data as it impacts performance. Never store sensitive information as well.
	* Can be considered for the scenarios where the same data needs to be accessed across multiple pages like user information.
5. Application:
--------------
	* The instance is unique in the app's context, and it's available while the app is running.
	* In the application scope, Spring creates a bean instance per web application runtime.
	* It is similar to singleton scope, with one major difference. Singleton scoped bean is singleton per ApplicationContext where application scoped bean is 	  singleton per ServletContext.
	* Can be considered for the scenarios where we want to store Drop Down values, Reference table values which won't change  the users.










SpringBoot:-
-------------
* Spring Boot was introduced in April 2014 to reduce some of the burdens while developing a java web application.
* Before SpringBoot, Developer need to configure a servlet container, establish link between Tomcat and Dispatcher servlet, deploy into a server, define lot of       
  dependencies
* But with SpringBoot, we can create Web apps skeletons with in seconds or atleaset 1-2 mins. It helps eleiminating all the configurations we need to do.
* SpringBoot is now one of the most apreciated projects in the spring ecosystem. It helps us to create Spring apps more efficiently and focus on the business code.
* SpringBoot is a mandatory skill now due to the latest trends like Full Stack Development, Microservices, Serverless, Containers, Docker etc.

Before SpringBoot:
-----------------
* Configure Maven/Gradle project with all the dependencies needed
* Understand how servlets work & configure the DispatcherServlet inside web.xml
* Package the web application into a WAR file. Deploy the same into a server 
* Deal with complicated class loading strategies, application monitoring management

After SpringBoot:-
--------------------
* Spring Boot automatically configures the bare minimum components of a spring application.
* Spring Boot applicaitons embed a web server so that we do not require an external application server.
* Spring Boot provides serveral useful production-ready featrues out of the box to monitor and maanage the application.

Spring Boot Important Features:-
--------------------------------

SpringBoot starters:
	* Spring Boot groups related dependencies used for a specific purpose as starter projects. We don't need to figure out all the must-have dependencies you need 	  to add your project for one particular purpose nor which versions you shoud use for compatibility.
       	  Example : spring-boot-starter-web
AutoConfiguration:
	* Based on the dependencies present in the classpath, spring boot guess and auto configure the spring beans, property configuration etc. However, auto-	  	  configuration backs away from the default configuration if it detects user-configured beans with custom configurations 
	* To achieve auto configuration spring boot follows the convention over-configuration principle.
Actuator & DevTools:
	* Spring boot provides a pre-defined list of actuator endpoints. Using this production ready endpoints, we can monitor app health, metrics etc.
	* DevTools includes features such as automatic detection of application code changes, LiveReload server to automatically refresh any HTML changes to the 	 browser all w/o server restart.
SpringBoot Devtolls:
	* The Spring Boot DevTools provides features like Automatic restart & LiveReload that make the application development experience a little more pleasant for 	  developers.
	* It can be added into any of the SpringBoot project by adding maven dependency 
	  Example: spring-boot-devtools

	* DevTools maintains 2 class loaders. One with classes that doesn't change and other one with classes that change. When restart needed it only reload the  	  second class loader which makes restarts faster as well.
	* DevTools includes an embedded LiveReload server that can be used to trigger a browser refresh when a resource is changed. LiveReload related browser 	  	  extensions are freely available for chrome, Firfox...
	* DevTools triggers a restart when ever a build is triggered through IDE or by maven commands etc.
	* DevTools disables the caching options by default during development.
	* Repackaged archives do not contain DevTools by default.

Introduction To MVC Pattern:-
-----------------------------
* Model view controller disign pattern: Separation of concersn to achieve loose coupliing.
Controller:
	*Controls the flow & decides which business logic needs to be executed. It acts as a brain inside MVC pattern.
View:
	* Represents UI and usually takes data from the controller and display it with the help of HTML pages.
Model:
	* Represents the data of the application like name, age, students list etc. It stores & manages the data.
	
MVC Architecture & Internal Flow:-
--------------------------------
1. Web Client makes HTTP request
2. Servlet containers like Tomcat accepts the HTTP requests and handovers the Servlet Request to Dispatcher Servlet inside spring Web App.
3. The Dispatcher Servlet will check with the Handler Mapping to identify the controller and method names to invode based on the HTTP method, path etc.
4. The Dispatcher Servlet will invoke the corresponding controller & method. After execution, the controller will provide a view name and data that needs to rendered in the view.
5. The Dispatcher servlet with the hep of a component called View Resolver finds the view and render it with the data provided by the controller.
6. The Servlet Container or Tomcat accepts the Servlet Response from the Dispatcher servlet and convert the same to HTTP response before rturning to the client.
7. The browser or client intercepts the HTTP response and display the view, data etc.

LOMOBOK:-
---------
* Lombok will reduce boilorplate code inside POJO classes like getters & setters.
* Lombok which is a java library provides you with several annotations aimed avoiding writing java code known to be repeetitive and / or boilerplate.
* It can be added into any of the Java project by adding the maven dependency
	<dependency>
		<groupId>org.projectlombok<groupId>
		<artifactId>lombok<artifactId>
	</dependency>
* Project Lombok works by plugging into your build process. Then, it will auto-generate the java bytecode into your .class files required to implement the desired              behavior, based on the annotations you used.
* Most commonly used Lombok Annotations,
	@Getter, @Setter
	@NoArgsConstructor
	@RequiredArgsConstructor
	@AllArgsConstructor
	@ToString, @EqualsAndHashCode
	@Data
@Data is shortcut annotation that combines the features of below annotations together,
	@ToString
	@EqualsAndHashCode
	@Getter, @Setter
	@RequiredArgsConstructor



Roles Of Servlets Inside WEB Apps:-
------------------------------------
Before Spring:
	Before spring, devloper has to create a new servlet instance, configure it in the servlet container, and assign it to a specific URL path
	When the client sends a request, Tomcat calss a method of the servlet associated with the path the client requested. The servlet gets the values on the request 	and builds the response that tomcat sends back to the client.

With Spring:
	With spring, it defines a servlet called Dispatcher Servlet which maintain all the URL mapping inside a web applicaiton.
	The Servlet container calls this dispatcer Servelet for any client request, allowing the servlet to manage the request and the response. This way Spring 	internally does all the magic for developers without the need of defining the servlets inside a Web app.



@RequestParam annotation:-
-------------------------
* In Spring @RequestParam is used to map either query parameters or form data.
* For example, if we want to get parameters value from HTTP GET requested URL then we can use @RequestParam annotation like in below example:
	@GetMapping("/holidays")
	public String displayHolidays(@RequestParam(required = false) boolean festival,
					@RequestParam(required = false) boolean federal) {
		return "holidays.html";
	}
* The @RequestParam annotation supports attributes like name, requred, value, default value. We can use them in our application based on the requirement.
* The name attribute indicaes the name of the request parameter to bind to.
* The required attribute is used to make a field either optional or mandatory. If it is mandatory, an exception will in case of missing fields.
* The value attribute is similar to name elements and can be used as an alias.
* defaultVAlue for the parameter is to handle missing values or null values. If the parameter does not contain any value then this default value will be considered.
 
@PathVariable Annotation:-
-------------------------
* The @PathVariable annotation is used to extract the value from the URL it is most suitable for the RESTful web service where the URL contains some value. Spring MVC          allows us to use multiple @PathVariable annotations in the same method.
* For example, if we want to get the value from a requested URI path, then we can use @PathVariable annotation like in below example,
	http://localhost:8080/holidays/all
	http://localhost:8080/holidays/federal
	http://localhost:8080/holidays/festival

	@GetMapping("/holidays/{display}")
	public String displayHolidays(@PathVariable String display) {
		return "holidays.html";
	}
* The @PathVariable annotation supports attributes like name, required, value similar to @RequestParam. We can use them in our application based on the requirements.


Validation With Spring Boot:-
------------------------------
* Bean validation is the stadard is for implementing validations in the Java ecosystem. It's well integrated with spring and spring boot.
* Below is the maven dependency that we can add to implement Bean validations in any spring/springboot project.
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-validation</artifactId>
	</dependency>
* Bean validation works by defining constraints to the fields of a class by annotating them with certain annotations.
* We can pu the @Valid annotation on method parameters and fields to tell spring that we want a method parameter or field to be validated.
* Below are the important packages where validations related annotations can be identified,
	* jakarta.validation.constraints.*;
	* org.hibernate.validator.constraints.*;



Important Validation Annotations


jakarta.validation.constraints.*;				org.hibernate.validator.constraints.*;

@Digits									@CreditCardNumber
@Email									@Length
@Max									@Currency
@Min									@Range
@NotBlank								@URL
@NotEmpty								@UniqueElements
@NotNull								@EAN
@Pattern								@ISBN
@Size



Spring Security:-
----------------
* Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.
* Below is the maven dependency that we can add to implement security using spring security project in any of the spring boot projects.
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-security</artifactId>
	</dependency>
* Spring security is a framework that provides authentication, authorization, and protection against common attacks.
* Spring Security helps developers with easier configurations to secure a web application by using standard username/password authentication mechanism.
* Spring Security provides out of the box features to handle common security attacks like CSRF, CORx. it also has good integration with security standards like JWT,        OAUTH2 etc.



Authentication:-
----------------
* In authentication, the identity of users are checked for providing the access to the system.
* Authentication done before authorization.
* It needs usually user's login details.
* If authentication fails usually we will get 401 error response.
* For example as a bank customer/employee in order to perform actions in the app, we need to prove our identity.

Authorization:-
--------------
* In authentication, person's or user's authorities are checked for accessing the resources.
* Authorization always happens after authentication.
* It needs user's privilege or roles
* If authorization fails usually we will get 403 error response.
* Once logged into the application, my roles, authorities will decide what kiind of actions I can do.


Configure Custom Security Congigs & CSRF Disable:-
--------------------------------------------------
* We can apply custom security configurations based on our requirements for each API/URL.
* permitAll() can be used to allow access w/o security and authenticated() can be used to protect a web page/API
* By default any requests with HTTP methods that can update like POST, PUT  will be stopped with 403 error due to CSRF protection. 
* Below is the sample configuration that we can do to implement custom security configs and disable CSRF.


    @Bean
    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {
        http.csrf().disable()
                .authorizeHttpRequests()
                .requestMatchers("/home").permitAll()
                .requestMatchers("/contact").permitAll()
                .requestMatchers("/holidays/**").permitAll()
                .requestMatchers("/saveMsg").permitAll()
                .requestMatchers("/courses").authenticated()
                .requestMatchers("/about").permitAll()
                .requestMatchers("/assets/**").permitAll()
                .and().formLogin()
                .and().httpBasic();
        return http.build();
    }
